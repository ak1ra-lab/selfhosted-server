---
- name: template ~/.aws profile
  when: aws_access_key != "" and aws_secret_key != ""
  block:
    - name: set_fact aws_profile_loop_vars
      ansible.builtin.set_fact:
        aws_profile_loop_vars:
          - {
              "owner": "{{ ansible_effective_user_id }}",
              "group": "{{ ansible_effective_group_id }}",
              "path": "{{ ansible_user_dir }}/.aws",
            }
          - {
              "owner": "{{ deploy_tarball_user }}",
              "group": "{{ deploy_tarball_group }}",
              "path": "{{ deploy_tarball_user_home }}/.aws",
            }

    - name: ensure ~/.aws directory exists
      ansible.builtin.file:
        path: "{{ item.path }}"
        owner: "{{ item.owner }}"
        group: "{{ item.group }}"
        mode: "0700"
        state: directory
      loop: "{{ aws_profile_loop_vars }}"

    - name: template ~/.aws/config
      ansible.builtin.blockinfile:
        path: "{{ item.path }}/config"
        owner: "{{ item.owner }}"
        group: "{{ item.group }}"
        create: true
        mode: "0600"
        block: |
          [profile {{ aws_profile }}]
          region = {{ aws_region }}
          output = json
      loop: "{{ aws_profile_loop_vars }}"

    - name: template ~/.aws/credentials
      ansible.builtin.blockinfile:
        path: "{{ item.path }}/credentials"
        owner: "{{ item.owner }}"
        group: "{{ item.group }}"
        create: true
        mode: "0600"
        block: |
          [{{ aws_profile }}]
          aws_access_key_id = {{ aws_access_key }}
          aws_secret_access_key = {{ aws_secret_key }}
      loop: "{{ aws_profile_loop_vars }}"

- name: download tarball from AWS S3
  amazon.aws.s3_object:
    bucket: "{{ deploy_tarball_url_hostname }}"
    object: "{{ deploy_tarball_url_path | trim('/') }}"
    dest: "{{ deploy_tarball_tempdir.path }}{{ deploy_tarball_url_path }}"
    mode: get
    profile: "{{ aws_profile }}"
    retries: "{{ aws_retry }}"

- name: decompress tarball downloaded from AWS S3
  ansible.builtin.unarchive:
    src: "{{ deploy_tarball_tempdir.path }}{{ deploy_tarball_url_path }}"
    dest: "{{ deploy_tarball_dest }}"
    owner: "{{ deploy_tarball_user }}"
    group: "{{ deploy_tarball_group }}"
    remote_src: true
