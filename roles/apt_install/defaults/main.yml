---
# roles/apt_install

# /etc/apt/sources.list.d/{{ apt_repo }}.sources
apt_repo: ""

# Try to avoid using 'ansible_lsb', which depends on 'lsb_release',
# which may be missing related fields in some distro like alpine.
apt_repo_uris: ""
apt_repo_suites: "{{ ansible_distribution_release }}"
apt_repo_components: main

# At least one of [apt_keyrings_url, apt_keyrings_file, apt_keyrings_content] must be set
apt_keyrings_url: ""
apt_keyrings_file: ""
apt_keyrings_content: ""

# armored keys should use .asc extension, binary should use .gpg
apt_keyrings_dest: ""

# https://manpages.debian.org/bookworm/apt/apt_preferences.5.en.html
apt_pinning: true
# A note of caution: the keyword used here is "origin" which can be used to match a hostname.
# This **should not be confused with** the Origin of a distribution as specified in a Release file.
apt_pinning_origin: "{{ apt_repo_uris | ansible.builtin.urlsplit('hostname') }}"

# https://wiki.debian.org/UnattendedUpgrades
# Lines below have the format "keyword=value,...".  A
# package will be upgraded only if the values in its metadata match
# all the supplied keywords in a line.  (In other words, omitted
# keywords are wild cards.) The keywords originate from the Release
# file, but several aliases are accepted.  The accepted keywords are:
#   a,archive,suite (eg, "stable")
#   c,component     (eg, "main", "contrib", "non-free")
#   l,label         (eg, "Debian", "Debian-Security")
#   o,origin        (eg, "Debian", "Unofficial Multimedia Packages")
#   n,codename      (eg, "jessie", "jessie-updates")
#     site          (eg, "http.debian.net")
# The available values on the system are printed by the command
# "apt-cache policy", and can be debugged by running
# "unattended-upgrades -d" and looking at the log file.
apt_unattended_upgrades: true
# we prefer site here
apt_unattended_upgrades_site: "{{ apt_repo_uris | ansible.builtin.urlsplit('hostname') }}"

# apt-mark hold package
apt_mark_hold: false

# list of packages to installed
apt_repo_packages: []

# ansible_architecture return x86_64,
# but $(dpkg --print-architecture) returns "amd64"
dpkg_architectures:
  x86_64: amd64 # Common Intel/AMD 64-bit
  i386: i386 # Intel 32-bit
  i686: i386 # Older 32-bit
  aarch64: arm64 # 64-bit ARM
  armv7l: armhf # 32-bit ARM hard-float
  armv6l: armel # 32-bit ARM soft-float (rare)
  ppc64le: ppc64el # PowerPC 64-bit Little Endian
  s390x: s390x # IBM System z
  riscv64: riscv64 # RISC-V 64-bit
